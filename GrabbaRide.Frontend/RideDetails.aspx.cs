using System;
using System.Collections.Generic;
using System.Web.UI;
using GrabbaRide.Database;
using Google.GData.Calendar;
using Google.GData.Client;
using Google.GData.Extensions;

namespace GrabbaRide.Frontend
{
    public partial class RideDetails : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

            if (!Page.IsPostBack)
            {
                // must be logged in to view this page
                if (!Request.IsAuthenticated)
                {
                    string me = Uri.EscapeDataString(Request.Url.PathAndQuery);
                    Response.Redirect(String.Format("Login.aspx?RedirectUrl={0}", me));
                }

                // make sure we have a ride id
                if (String.IsNullOrEmpty(Request.QueryString["id"]))
                if (Request.QueryString["token"] != null)
                {
                    try
                    {
                         this.Session["sessionToken"] =   AuthSubUtil.exchangeForSessionToken(Request.QueryString["token"], null);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.ToString());
                    }
                    //This gets us our session authcation
                    GAuthSubRequestFactory authFactory = new GAuthSubRequestFactory("cl", "CalendarSampleApp");
                    try
                    {
                        authFactory.Token = Session["sessionToken"].ToString();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.ToString());
                    }

                    Service service = new Service("cl", authFactory.ApplicationName);
                    service.RequestFactory = authFactory;

                    Google.GData.Calendar.EventEntry calToPush = new Google.GData.Calendar.EventEntry();

                    String recurData =
                      "DTSTART;VALUE=DATE:20081007\r\n" +
                      "DTEND;VALUE=DATE:20090502\r\n" +
                      "RRULE:FREQ=WEEKLY;BYDAY=Tu;UNTIL=20090904\r\n";

                    Recurrence recurrence = new Recurrence();
                    recurrence.Value = recurData;
                    calToPush.Recurrence = recurrence;


                    Reminder fifteenMinReminder = new Reminder();
                    fifteenMinReminder.Minutes = 15;
                    fifteenMinReminder.Method = Reminder.ReminderMethod.sms;
                    calToPush.Reminders.Add(fifteenMinReminder);
                    service.Update(calToPush);
                    //   entry.Reminders.Add(fifteenMinReminder);
                    // entry.update();

                }


                try
                {
                    Response.Redirect("Search.aspx");

                    int rideID = Int32.Parse(Request.QueryString["id"]);
                    GrabbaRideDBDataContext dataContext = new GrabbaRideDBDataContext();
                    Ride ride = dataContext.GetRideByID(rideID);

                // get the ride details
                GoogleMaps.LoadGoogleMapsScripts(this.Page);
                GrabbaRideDBDataContext db = new GrabbaRideDBDataContext();
                int rideID = Convert.ToInt32(Request.QueryString["id"]);
                Ride thisride = db.GetRideByID(rideID);
                
                if (thisride != null)
                {
                    // set the hidden fields for google maps
                    hfstart.Value = String.Format("{0},{1}",
                        thisride.LocationFromLat, thisride.LocationFromLong);
                    hfend.Value = String.Format("{0},{1}",
                        thisride.LocationToLat, thisride.LocationToLong);

                    if (thisride.User.Username == User.Identity.Name)
                    {
                        // display "my profile", make editable
                        DetailsView1.AutoGenerateEditButton = true;
                        DetailsView1.AutoGenerateDeleteButton = true;

                        // hide email user box
                        EmailUserDiv.Visible = false;
                    }
                    else
                    {
                        // disallow editing
                        DetailsView1.AutoGenerateEditButton = false;
                        DetailsView1.AutoGenerateDeleteButton = false;
                    }
                }
            }
        }

        protected void hfstart_ValueChanged(object sender, EventArgs e)
        {

        }

        protected void addToGcalender_Click(object sender, ImageClickEventArgs e)
        {
            Response.Redirect(AuthSubUtil.getRequestUrl(Request.Url.AbsoluteUri,
                                                        "http://www.google.com/calendar/feeds/",
                                                        false,
                                                        false));
            //  Response.Redirect("https://www.google.com/accounts/AuthSubRequest?scope=http%3A%2F%2Fwww.google.com%2fcalendar%2Ffeeds%2F" 
            //  + "&next=" + Uri.EscapeDataString(Request.Url.AbsoluteUri) + "&session=0&secure=0");

        /// <summary>
        /// Sends an email to this user.
        /// </summary>
        protected void EmailMessageSend_Click(object sender, EventArgs e)
        {
            GrabbaRideDBDataContext dataContext = new GrabbaRideDBDataContext();
            User userSend = dataContext.GetUserByUsername(Page.User.Identity.Name);
            User userRecv = dataContext.GetRideByID(Int32.Parse(Request.QueryString["id"])).User;
            userRecv.SendMessage(EmailMessage.Text, userSend);
        }
    }
}
