#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GrabbaRide.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class GrabbaRideDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRide(Ride instance);
    partial void UpdateRide(Ride instance);
    partial void DeleteRide(Ride instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public GrabbaRideDBDataContext() : 
				base(global::GrabbaRide.Database.Properties.Settings.Default.GrabbaRideDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GrabbaRideDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GrabbaRideDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GrabbaRideDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GrabbaRideDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ride> Rides
		{
			get
			{
				return this.GetTable<Ride>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<RecurringRide> RecurringRides
		{
			get
			{
				return this.GetTable<RecurringRide>();
			}
		}
	}
	
	[Table(Name="")]
	public partial class Ride : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RideID = default(int);
		
		private int _UserID;
		
		private int _FromLocationID;
		
		private int _ToLocationID;
		
		private System.DateTime _DepartureTime;
		
		private System.Nullable<System.DateTime> _ArrivalTime;
		
		private System.Nullable<int> _ReturnRideID;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
		private string _RecurringRideID;
		
		private EntitySet<Ride> _Rides;
		
		private EntityRef<Location> _FromLocation;
		
		private EntityRef<Location> _ToLocation;
		
		private EntityRef<User> _User;
		
		private EntityRef<Ride> _Ride1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFromLocationIDChanging(int value);
    partial void OnFromLocationIDChanged();
    partial void OnToLocationIDChanging(int value);
    partial void OnToLocationIDChanged();
    partial void OnDepartureTimeChanging(System.DateTime value);
    partial void OnDepartureTimeChanged();
    partial void OnArrivalTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnArrivalTimeChanged();
    partial void OnReturnRideIDChanging(System.Nullable<int> value);
    partial void OnReturnRideIDChanged();
    partial void OnCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationDateChanged();
    partial void OnRecurringRideIDChanging(string value);
    partial void OnRecurringRideIDChanged();
    #endregion
		
		public Ride()
		{
			this._Rides = new EntitySet<Ride>(new Action<Ride>(this.attach_Rides), new Action<Ride>(this.detach_Rides));
			this._FromLocation = default(EntityRef<Location>);
			this._ToLocation = default(EntityRef<Location>);
			this._User = default(EntityRef<User>);
			this._Ride1 = default(EntityRef<Ride>);
			OnCreated();
		}
		
		[Column(Storage="_RideID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int RideID
		{
			get
			{
				return this._RideID;
			}
		}
		
		[Column(Storage="_UserID")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromLocationID")]
		public int FromLocationID
		{
			get
			{
				return this._FromLocationID;
			}
			set
			{
				if ((this._FromLocationID != value))
				{
					if (this._FromLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromLocationIDChanging(value);
					this.SendPropertyChanging();
					this._FromLocationID = value;
					this.SendPropertyChanged("FromLocationID");
					this.OnFromLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToLocationID")]
		public int ToLocationID
		{
			get
			{
				return this._ToLocationID;
			}
			set
			{
				if ((this._ToLocationID != value))
				{
					if (this._ToLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ToLocationID = value;
					this.SendPropertyChanged("ToLocationID");
					this.OnToLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartureTime")]
		public System.DateTime DepartureTime
		{
			get
			{
				return this._DepartureTime;
			}
			set
			{
				if ((this._DepartureTime != value))
				{
					this.OnDepartureTimeChanging(value);
					this.SendPropertyChanging();
					this._DepartureTime = value;
					this.SendPropertyChanged("DepartureTime");
					this.OnDepartureTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ArrivalTime")]
		public System.Nullable<System.DateTime> ArrivalTime
		{
			get
			{
				return this._ArrivalTime;
			}
			set
			{
				if ((this._ArrivalTime != value))
				{
					this.OnArrivalTimeChanging(value);
					this.SendPropertyChanging();
					this._ArrivalTime = value;
					this.SendPropertyChanged("ArrivalTime");
					this.OnArrivalTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnRideID")]
		public System.Nullable<int> ReturnRideID
		{
			get
			{
				return this._ReturnRideID;
			}
			set
			{
				if ((this._ReturnRideID != value))
				{
					if (this._Ride1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReturnRideIDChanging(value);
					this.SendPropertyChanging();
					this._ReturnRideID = value;
					this.SendPropertyChanged("ReturnRideID");
					this.OnReturnRideIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate")]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_RecurringRideID", CanBeNull=false)]
		public string RecurringRideID
		{
			get
			{
				return this._RecurringRideID;
			}
			set
			{
				if ((this._RecurringRideID != value))
				{
					this.OnRecurringRideIDChanging(value);
					this.SendPropertyChanging();
					this._RecurringRideID = value;
					this.SendPropertyChanged("RecurringRideID");
					this.OnRecurringRideIDChanged();
				}
			}
		}
		
		[Association(Name="Ride_Ride", Storage="_Rides", OtherKey="ReturnRideID")]
		public EntitySet<Ride> Rides
		{
			get
			{
				return this._Rides;
			}
			set
			{
				this._Rides.Assign(value);
			}
		}
		
		[Association(Name="Location_Ride", Storage="_FromLocation", ThisKey="FromLocationID", IsForeignKey=true)]
		public Location FromLocation
		{
			get
			{
				return this._FromLocation.Entity;
			}
			set
			{
				if ((this._FromLocation.Entity != value))
				{
					this.SendPropertyChanging();
					this._FromLocation.Entity = value;
					this.SendPropertyChanged("FromLocation");
				}
			}
		}
		
		[Association(Name="Location_Ride1", Storage="_ToLocation", ThisKey="ToLocationID", IsForeignKey=true)]
		public Location ToLocation
		{
			get
			{
				return this._ToLocation.Entity;
			}
			set
			{
				if ((this._ToLocation.Entity != value))
				{
					this.SendPropertyChanging();
					this._ToLocation.Entity = value;
					this.SendPropertyChanged("ToLocation");
				}
			}
		}
		
		[Association(Name="User_Ride", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Rides.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Rides.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Ride_Ride", Storage="_Ride1", ThisKey="ReturnRideID", IsForeignKey=true)]
		public Ride Ride1
		{
			get
			{
				return this._Ride1.Entity;
			}
			set
			{
				Ride previousValue = this._Ride1.Entity;
				if (((previousValue != value) 
							|| (this._Ride1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ride1.Entity = null;
						previousValue.Rides.Remove(this);
					}
					this._Ride1.Entity = value;
					if ((value != null))
					{
						value.Rides.Add(this);
						this._ReturnRideID = value.RideID;
					}
					else
					{
						this._ReturnRideID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ride1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rides(Ride entity)
		{
			this.SendPropertyChanging();
			entity.Ride1 = this;
		}
		
		private void detach_Rides(Ride entity)
		{
			this.SendPropertyChanging();
			entity.Ride1 = null;
		}
	}
	
	[Table(Name="")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID = default(int);
		
		private string _Name;
		
		private float _Long;
		
		private float _Lat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLongChanging(float value);
    partial void OnLongChanged();
    partial void OnLatChanging(float value);
    partial void OnLatChanged();
    #endregion
		
		public Location()
		{
			OnCreated();
		}
		
		[Column(Storage="_LocationID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
		}
		
		[Column(Storage="_Name", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Long")]
		public float Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[Column(Storage="_Lat")]
		public float Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID = default(int);
		
		private string _Username;
		
		private string _FullName;
		
		private EntitySet<Ride> _Rides;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    #endregion
		
		public User()
		{
			this._Rides = new EntitySet<Ride>(new Action<Ride>(this.attach_Rides), new Action<Ride>(this.detach_Rides));
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
		}
		
		[Column(Storage="_Username", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_FullName")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Association(Name="User_Ride", Storage="_Rides", OtherKey="UserID")]
		public EntitySet<Ride> Rides
		{
			get
			{
				return this._Rides;
			}
			set
			{
				this._Rides.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rides(Ride entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Rides(Ride entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="")]
	public partial class RecurringRide
	{
		
		private string _RecurringRideID;
		
		private string _Interval;
		
		private System.Nullable<bool> _RecurMon;
		
		private System.Nullable<bool> _RecurTue;
		
		private System.Nullable<bool> _RecurWed;
		
		private System.Nullable<bool> _RecurThu;
		
		private System.Nullable<bool> _RecurFri;
		
		private System.Nullable<bool> _RecurSat;
		
		private System.Nullable<bool> _RecurSun;
		
		private string _EndByDate;
		
		public RecurringRide()
		{
		}
		
		[Column(Storage="_RecurringRideID", CanBeNull=false)]
		public string RecurringRideID
		{
			get
			{
				return this._RecurringRideID;
			}
			set
			{
				if ((this._RecurringRideID != value))
				{
					this._RecurringRideID = value;
				}
			}
		}
		
		[Column(Storage="_Interval", CanBeNull=false)]
		public string Interval
		{
			get
			{
				return this._Interval;
			}
			set
			{
				if ((this._Interval != value))
				{
					this._Interval = value;
				}
			}
		}
		
		[Column(Storage="_RecurMon")]
		public System.Nullable<bool> RecurMon
		{
			get
			{
				return this._RecurMon;
			}
			set
			{
				if ((this._RecurMon != value))
				{
					this._RecurMon = value;
				}
			}
		}
		
		[Column(Storage="_RecurTue")]
		public System.Nullable<bool> RecurTue
		{
			get
			{
				return this._RecurTue;
			}
			set
			{
				if ((this._RecurTue != value))
				{
					this._RecurTue = value;
				}
			}
		}
		
		[Column(Storage="_RecurWed")]
		public System.Nullable<bool> RecurWed
		{
			get
			{
				return this._RecurWed;
			}
			set
			{
				if ((this._RecurWed != value))
				{
					this._RecurWed = value;
				}
			}
		}
		
		[Column(Storage="_RecurThu")]
		public System.Nullable<bool> RecurThu
		{
			get
			{
				return this._RecurThu;
			}
			set
			{
				if ((this._RecurThu != value))
				{
					this._RecurThu = value;
				}
			}
		}
		
		[Column(Storage="_RecurFri")]
		public System.Nullable<bool> RecurFri
		{
			get
			{
				return this._RecurFri;
			}
			set
			{
				if ((this._RecurFri != value))
				{
					this._RecurFri = value;
				}
			}
		}
		
		[Column(Storage="_RecurSat")]
		public System.Nullable<bool> RecurSat
		{
			get
			{
				return this._RecurSat;
			}
			set
			{
				if ((this._RecurSat != value))
				{
					this._RecurSat = value;
				}
			}
		}
		
		[Column(Storage="_RecurSun")]
		public System.Nullable<bool> RecurSun
		{
			get
			{
				return this._RecurSun;
			}
			set
			{
				if ((this._RecurSun != value))
				{
					this._RecurSun = value;
				}
			}
		}
		
		[Column(Storage="_EndByDate")]
		public string EndByDate
		{
			get
			{
				return this._EndByDate;
			}
			set
			{
				if ((this._EndByDate != value))
				{
					this._EndByDate = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
