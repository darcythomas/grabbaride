#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GrabbaRide.ObjectMappings
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="GrabbaRideDB")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertRide(Ride instance);
    partial void UpdateRide(Ride instance);
    partial void DeleteRide(Ride instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::GrabbaRide.ObjectMappings.Properties.Settings.Default.GrabbaRideDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Ride> Rides
		{
			get
			{
				return this.GetTable<Ride>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[Table(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private string _Name;
		
		private double _Long;
		
		private double _Lat;
		
		private EntitySet<Ride> _Rides;
		
		private EntitySet<Ride> _Rides1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLongChanging(double value);
    partial void OnLongChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    #endregion
		
		public Location()
		{
			this._Rides = new EntitySet<Ride>(new Action<Ride>(this.attach_Rides), new Action<Ride>(this.detach_Rides));
			this._Rides1 = new EntitySet<Ride>(new Action<Ride>(this.attach_Rides1), new Action<Ride>(this.detach_Rides1));
			OnCreated();
		}
		
		[Column(Storage="_LocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Long", DbType="Float NOT NULL")]
		public double Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[Column(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[Association(Name="Location_Ride", Storage="_Rides", OtherKey="FromLocationID")]
		public EntitySet<Ride> Rides
		{
			get
			{
				return this._Rides;
			}
			set
			{
				this._Rides.Assign(value);
			}
		}
		
		[Association(Name="Location_Ride1", Storage="_Rides1", OtherKey="ToLocationID")]
		public EntitySet<Ride> Rides1
		{
			get
			{
				return this._Rides1;
			}
			set
			{
				this._Rides1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rides(Ride entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Rides(Ride entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_Rides1(Ride entity)
		{
			this.SendPropertyChanging();
			entity.Location1 = this;
		}
		
		private void detach_Rides1(Ride entity)
		{
			this.SendPropertyChanging();
			entity.Location1 = null;
		}
	}
	
	[Table(Name="dbo.Rides")]
	public partial class Ride : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RideID;
		
		private int _UserID;
		
		private int _FromLocationID;
		
		private int _ToLocationID;
		
		private System.DateTime _DepatureTime;
		
		private System.DateTime _ArivalTime;
		
		private System.Nullable<int> _ReturnRideID;
		
		private System.Xml.Linq.XElement _Recurrence;
		
		private System.Nullable<bool> _Complete;
		
		private System.Nullable<bool> _RideType;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Location> _Location1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRideIDChanging(int value);
    partial void OnRideIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFromLocationIDChanging(int value);
    partial void OnFromLocationIDChanged();
    partial void OnToLocationIDChanging(int value);
    partial void OnToLocationIDChanged();
    partial void OnDepatureTimeChanging(System.DateTime value);
    partial void OnDepatureTimeChanged();
    partial void OnArivalTimeChanging(System.DateTime value);
    partial void OnArivalTimeChanged();
    partial void OnReturnRideIDChanging(System.Nullable<int> value);
    partial void OnReturnRideIDChanged();
    partial void OnRecurrenceChanging(System.Xml.Linq.XElement value);
    partial void OnRecurrenceChanged();
    partial void OnCompleteChanging(System.Nullable<bool> value);
    partial void OnCompleteChanged();
    partial void OnRideTypeChanging(System.Nullable<bool> value);
    partial void OnRideTypeChanged();
    #endregion
		
		public Ride()
		{
			this._Location = default(EntityRef<Location>);
			this._Location1 = default(EntityRef<Location>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_RideID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RideID
		{
			get
			{
				return this._RideID;
			}
			set
			{
				if ((this._RideID != value))
				{
					this.OnRideIDChanging(value);
					this.SendPropertyChanging();
					this._RideID = value;
					this.SendPropertyChanged("RideID");
					this.OnRideIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromLocationID", DbType="Int NOT NULL")]
		public int FromLocationID
		{
			get
			{
				return this._FromLocationID;
			}
			set
			{
				if ((this._FromLocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromLocationIDChanging(value);
					this.SendPropertyChanging();
					this._FromLocationID = value;
					this.SendPropertyChanged("FromLocationID");
					this.OnFromLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToLocationID", DbType="Int NOT NULL")]
		public int ToLocationID
		{
			get
			{
				return this._ToLocationID;
			}
			set
			{
				if ((this._ToLocationID != value))
				{
					if (this._Location1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ToLocationID = value;
					this.SendPropertyChanged("ToLocationID");
					this.OnToLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepatureTime", DbType="DateTime NOT NULL")]
		public System.DateTime DepatureTime
		{
			get
			{
				return this._DepatureTime;
			}
			set
			{
				if ((this._DepatureTime != value))
				{
					this.OnDepatureTimeChanging(value);
					this.SendPropertyChanging();
					this._DepatureTime = value;
					this.SendPropertyChanged("DepatureTime");
					this.OnDepatureTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ArivalTime", DbType="DateTime NOT NULL")]
		public System.DateTime ArivalTime
		{
			get
			{
				return this._ArivalTime;
			}
			set
			{
				if ((this._ArivalTime != value))
				{
					this.OnArivalTimeChanging(value);
					this.SendPropertyChanging();
					this._ArivalTime = value;
					this.SendPropertyChanged("ArivalTime");
					this.OnArivalTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnRideID", DbType="Int")]
		public System.Nullable<int> ReturnRideID
		{
			get
			{
				return this._ReturnRideID;
			}
			set
			{
				if ((this._ReturnRideID != value))
				{
					this.OnReturnRideIDChanging(value);
					this.SendPropertyChanging();
					this._ReturnRideID = value;
					this.SendPropertyChanged("ReturnRideID");
					this.OnReturnRideIDChanged();
				}
			}
		}
		
		[Column(Storage="_Recurrence", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Recurrence
		{
			get
			{
				return this._Recurrence;
			}
			set
			{
				if ((this._Recurrence != value))
				{
					this.OnRecurrenceChanging(value);
					this.SendPropertyChanging();
					this._Recurrence = value;
					this.SendPropertyChanged("Recurrence");
					this.OnRecurrenceChanged();
				}
			}
		}
		
		[Column(Storage="_Complete", DbType="Bit")]
		public System.Nullable<bool> Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this.OnCompleteChanging(value);
					this.SendPropertyChanging();
					this._Complete = value;
					this.SendPropertyChanged("Complete");
					this.OnCompleteChanged();
				}
			}
		}
		
		[Column(Storage="_RideType", DbType="Bit")]
		public System.Nullable<bool> RideType
		{
			get
			{
				return this._RideType;
			}
			set
			{
				if ((this._RideType != value))
				{
					this.OnRideTypeChanging(value);
					this.SendPropertyChanging();
					this._RideType = value;
					this.SendPropertyChanged("RideType");
					this.OnRideTypeChanged();
				}
			}
		}
		
		[Association(Name="Location_Ride", Storage="_Location", ThisKey="FromLocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Rides.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Rides.Add(this);
						this._FromLocationID = value.LocationID;
					}
					else
					{
						this._FromLocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[Association(Name="Location_Ride1", Storage="_Location1", ThisKey="ToLocationID", IsForeignKey=true)]
		public Location Location1
		{
			get
			{
				return this._Location1.Entity;
			}
			set
			{
				Location previousValue = this._Location1.Entity;
				if (((previousValue != value) 
							|| (this._Location1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location1.Entity = null;
						previousValue.Rides1.Remove(this);
					}
					this._Location1.Entity = value;
					if ((value != null))
					{
						value.Rides1.Add(this);
						this._ToLocationID = value.LocationID;
					}
					else
					{
						this._ToLocationID = default(int);
					}
					this.SendPropertyChanged("Location1");
				}
			}
		}
		
		[Association(Name="User_Ride", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Rides.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Rides.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Name;
		
		private EntitySet<Ride> _Rides;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public User()
		{
			this._Rides = new EntitySet<Ride>(new Action<Ride>(this.attach_Rides), new Action<Ride>(this.detach_Rides));
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="User_Ride", Storage="_Rides", OtherKey="UserID")]
		public EntitySet<Ride> Rides
		{
			get
			{
				return this._Rides;
			}
			set
			{
				this._Rides.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rides(Ride entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Rides(Ride entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
