#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GrabbaRide.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class GrabbaRideDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRide(Ride instance);
    partial void UpdateRide(Ride instance);
    partial void DeleteRide(Ride instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRecurringRide(RecurringRide instance);
    partial void UpdateRecurringRide(RecurringRide instance);
    partial void DeleteRecurringRide(RecurringRide instance);
    partial void InsertOpenID(OpenID instance);
    partial void UpdateOpenID(OpenID instance);
    partial void DeleteOpenID(OpenID instance);
    #endregion
		
		public GrabbaRideDBDataContext() : 
				base(global::GrabbaRide.Database.Properties.Settings.Default.GrabbaRideDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GrabbaRideDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GrabbaRideDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GrabbaRideDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GrabbaRideDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ride> Rides
		{
			get
			{
				return this.GetTable<Ride>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<RecurringRide> RecurringRides
		{
			get
			{
				return this.GetTable<RecurringRide>();
			}
		}
		
		public System.Data.Linq.Table<OpenID> OpenIDs
		{
			get
			{
				return this.GetTable<OpenID>();
			}
		}
	}
	
	[Table(Name="")]
	public partial class Ride : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RideID = default(int);
		
		private int _UserID;
		
		private int _FromLocationID;
		
		private int _ToLocationID;
		
		private System.DateTime _DepartureTime;
		
		private System.Nullable<System.DateTime> _ArrivalTime;
		
		private System.Nullable<int> _ReturnRideID;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
		private System.Nullable<int> _RecurringRideID;
		
		private EntityRef<Location> _FromLocation;
		
		private EntityRef<Location> _ToLocation;
		
		private EntityRef<User> _User;
		
		private EntityRef<Ride> _Ride1;
		
		private EntityRef<RecurringRide> _RecurringRide;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFromLocationIDChanging(int value);
    partial void OnFromLocationIDChanged();
    partial void OnToLocationIDChanging(int value);
    partial void OnToLocationIDChanged();
    partial void OnDepartureTimeChanging(System.DateTime value);
    partial void OnDepartureTimeChanged();
    partial void OnArrivalTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnArrivalTimeChanged();
    partial void OnReturnRideIDChanging(System.Nullable<int> value);
    partial void OnReturnRideIDChanged();
    partial void OnCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationDateChanged();
    partial void OnRecurringRideIDChanging(System.Nullable<int> value);
    partial void OnRecurringRideIDChanged();
    #endregion
		
		public Ride()
		{
			this._FromLocation = default(EntityRef<Location>);
			this._ToLocation = default(EntityRef<Location>);
			this._User = default(EntityRef<User>);
			this._Ride1 = default(EntityRef<Ride>);
			this._RecurringRide = default(EntityRef<RecurringRide>);
			OnCreated();
		}
		
		[Column(Storage="_RideID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int RideID
		{
			get
			{
				return this._RideID;
			}
		}
		
		[Column(Storage="_UserID")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromLocationID")]
		public int FromLocationID
		{
			get
			{
				return this._FromLocationID;
			}
			set
			{
				if ((this._FromLocationID != value))
				{
					if (this._FromLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromLocationIDChanging(value);
					this.SendPropertyChanging();
					this._FromLocationID = value;
					this.SendPropertyChanged("FromLocationID");
					this.OnFromLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToLocationID")]
		public int ToLocationID
		{
			get
			{
				return this._ToLocationID;
			}
			set
			{
				if ((this._ToLocationID != value))
				{
					if (this._ToLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ToLocationID = value;
					this.SendPropertyChanged("ToLocationID");
					this.OnToLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartureTime")]
		public System.DateTime DepartureTime
		{
			get
			{
				return this._DepartureTime;
			}
			set
			{
				if ((this._DepartureTime != value))
				{
					this.OnDepartureTimeChanging(value);
					this.SendPropertyChanging();
					this._DepartureTime = value;
					this.SendPropertyChanged("DepartureTime");
					this.OnDepartureTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ArrivalTime")]
		public System.Nullable<System.DateTime> ArrivalTime
		{
			get
			{
				return this._ArrivalTime;
			}
			set
			{
				if ((this._ArrivalTime != value))
				{
					this.OnArrivalTimeChanging(value);
					this.SendPropertyChanging();
					this._ArrivalTime = value;
					this.SendPropertyChanged("ArrivalTime");
					this.OnArrivalTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnRideID")]
		public System.Nullable<int> ReturnRideID
		{
			get
			{
				return this._ReturnRideID;
			}
			set
			{
				if ((this._ReturnRideID != value))
				{
					if (this._Ride1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReturnRideIDChanging(value);
					this.SendPropertyChanging();
					this._ReturnRideID = value;
					this.SendPropertyChanged("ReturnRideID");
					this.OnReturnRideIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate")]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_RecurringRideID")]
		public System.Nullable<int> RecurringRideID
		{
			get
			{
				return this._RecurringRideID;
			}
			set
			{
				if ((this._RecurringRideID != value))
				{
					if (this._RecurringRide.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecurringRideIDChanging(value);
					this.SendPropertyChanging();
					this._RecurringRideID = value;
					this.SendPropertyChanged("RecurringRideID");
					this.OnRecurringRideIDChanged();
				}
			}
		}
		
		[Association(Name="Location_Ride", Storage="_FromLocation", ThisKey="FromLocationID", IsForeignKey=true)]
		public Location FromLocation
		{
			get
			{
				return this._FromLocation.Entity;
			}
			set
			{
				if ((this._FromLocation.Entity != value))
				{
					this.SendPropertyChanging();
					this._FromLocation.Entity = value;
					this.SendPropertyChanged("FromLocation");
				}
			}
		}
		
		[Association(Name="Location_Ride1", Storage="_ToLocation", ThisKey="ToLocationID", IsForeignKey=true)]
		public Location ToLocation
		{
			get
			{
				return this._ToLocation.Entity;
			}
			set
			{
				if ((this._ToLocation.Entity != value))
				{
					this.SendPropertyChanging();
					this._ToLocation.Entity = value;
					this.SendPropertyChanged("ToLocation");
				}
			}
		}
		
		[Association(Name="User_Ride", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Rides.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Rides.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Ride_Ride", Storage="_Ride1", ThisKey="ReturnRideID", IsForeignKey=true)]
		public Ride ReturnRide
		{
			get
			{
				return this._Ride1.Entity;
			}
			set
			{
				if ((this._Ride1.Entity != value))
				{
					this.SendPropertyChanging();
					this._Ride1.Entity = value;
					this.SendPropertyChanged("ReturnRide");
				}
			}
		}
		
		[Association(Name="RecurringRide_Ride", Storage="_RecurringRide", ThisKey="RecurringRideID", IsForeignKey=true)]
		public RecurringRide RecurringRideInfo
		{
			get
			{
				return this._RecurringRide.Entity;
			}
			set
			{
				if ((this._RecurringRide.Entity != value))
				{
					this.SendPropertyChanging();
					this._RecurringRide.Entity = value;
					this.SendPropertyChanged("RecurringRideInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID = default(int);
		
		private string _Name;
		
		private double _Long;
		
		private double _Lat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLongChanging(double value);
    partial void OnLongChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    #endregion
		
		public Location()
		{
			OnCreated();
		}
		
		[Column(Storage="_LocationID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
		}
		
		[Column(Storage="_Name", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Long")]
		public double Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[Column(Storage="_Lat")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID = default(int);
		
		private string _FirstName;
		
		private string _LastName;
		
		private Gender _Gender;
		
		private System.DateTime _DOB;
		
		private string _Occupation;
		
		private string _Username;
		
		private string _Password;
		
		private string _Email;
		
		private string _ApplicationName = default(string);
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private System.DateTime _LastActvityDate;
		
		private System.DateTime _LastLogIn;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _CreationDate;
		
		private bool _IsOnline;
		
		private bool _IsLockedOut;
		
		private EntitySet<Ride> _Rides;
		
		private EntitySet<OpenID> _OpenIDs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(Gender value);
    partial void OnGenderChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnLastActvityDateChanging(System.DateTime value);
    partial void OnLastActvityDateChanged();
    partial void OnLastLogInChanging(System.DateTime value);
    partial void OnLastLogInChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnIsOnlineChanging(bool value);
    partial void OnIsOnlineChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    #endregion
		
		public User()
		{
			this._Rides = new EntitySet<Ride>(new Action<Ride>(this.attach_Rides), new Action<Ride>(this.detach_Rides));
			this._OpenIDs = new EntitySet<OpenID>(new Action<OpenID>(this.attach_OpenIDs), new Action<OpenID>(this.detach_OpenIDs));
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
		}
		
		[Column(Storage="_FirstName", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", CanBeNull=false)]
		public Gender Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_DOB")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[Column(Storage="_Occupation")]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[Column(Storage="_Username", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Email", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationName", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
		}
		
		[Column(Storage="_PasswordQuestion", CanBeNull=false)]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordAnswer", CanBeNull=false)]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_LastActvityDate")]
		public System.DateTime LastActvityDate
		{
			get
			{
				return this._LastActvityDate;
			}
			set
			{
				if ((this._LastActvityDate != value))
				{
					this.OnLastActvityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActvityDate = value;
					this.SendPropertyChanged("LastActvityDate");
					this.OnLastActvityDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLogIn")]
		public System.DateTime LastLogIn
		{
			get
			{
				return this._LastLogIn;
			}
			set
			{
				if ((this._LastLogIn != value))
				{
					this.OnLastLogInChanging(value);
					this.SendPropertyChanging();
					this._LastLogIn = value;
					this.SendPropertyChanged("LastLogIn");
					this.OnLastLogInChanged();
				}
			}
		}
		
		[Column(Storage="_LastPasswordChangedDate")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsOnline")]
		public bool IsOnline
		{
			get
			{
				return this._IsOnline;
			}
			set
			{
				if ((this._IsOnline != value))
				{
					this.OnIsOnlineChanging(value);
					this.SendPropertyChanging();
					this._IsOnline = value;
					this.SendPropertyChanged("IsOnline");
					this.OnIsOnlineChanged();
				}
			}
		}
		
		[Column(Storage="_IsLockedOut")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[Association(Name="User_Ride", Storage="_Rides", OtherKey="UserID")]
		public EntitySet<Ride> Rides
		{
			get
			{
				return this._Rides;
			}
			set
			{
				this._Rides.Assign(value);
			}
		}
		
		[Association(Name="User_OpenID", Storage="_OpenIDs", OtherKey="UserID")]
		public EntitySet<OpenID> OpenIDs
		{
			get
			{
				return this._OpenIDs;
			}
			set
			{
				this._OpenIDs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rides(Ride entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Rides(Ride entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_OpenIDs(OpenID entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_OpenIDs(OpenID entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="")]
	public partial class RecurringRide : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecurringRideID = default(int);
		
		private string _Interval;
		
		private System.Nullable<bool> _RecurMon;
		
		private System.Nullable<bool> _RecurTue;
		
		private System.Nullable<bool> _RecurWed;
		
		private System.Nullable<bool> _RecurThu;
		
		private System.Nullable<bool> _RecurFri;
		
		private System.Nullable<bool> _RecurSat;
		
		private System.Nullable<bool> _RecurSun;
		
		private System.Nullable<System.DateTime> _EndByDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecurIntervalChanging(string value);
    partial void OnRecurIntervalChanged();
    partial void OnRecurMonChanging(System.Nullable<bool> value);
    partial void OnRecurMonChanged();
    partial void OnRecurTueChanging(System.Nullable<bool> value);
    partial void OnRecurTueChanged();
    partial void OnRecurWedChanging(System.Nullable<bool> value);
    partial void OnRecurWedChanged();
    partial void OnRecurThuChanging(System.Nullable<bool> value);
    partial void OnRecurThuChanged();
    partial void OnRecurFriChanging(System.Nullable<bool> value);
    partial void OnRecurFriChanged();
    partial void OnRecurSatChanging(System.Nullable<bool> value);
    partial void OnRecurSatChanged();
    partial void OnRecurSunChanging(System.Nullable<bool> value);
    partial void OnRecurSunChanged();
    partial void OnRecurEndByDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRecurEndByDateChanged();
    #endregion
		
		public RecurringRide()
		{
			OnCreated();
		}
		
		[Column(Storage="_RecurringRideID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int RecurringRideID
		{
			get
			{
				return this._RecurringRideID;
			}
		}
		
		[Column(Name="Interval", Storage="_Interval", CanBeNull=false)]
		public string RecurInterval
		{
			get
			{
				return this._Interval;
			}
			set
			{
				if ((this._Interval != value))
				{
					this.OnRecurIntervalChanging(value);
					this.SendPropertyChanging();
					this._Interval = value;
					this.SendPropertyChanged("RecurInterval");
					this.OnRecurIntervalChanged();
				}
			}
		}
		
		[Column(Storage="_RecurMon")]
		public System.Nullable<bool> RecurMon
		{
			get
			{
				return this._RecurMon;
			}
			set
			{
				if ((this._RecurMon != value))
				{
					this.OnRecurMonChanging(value);
					this.SendPropertyChanging();
					this._RecurMon = value;
					this.SendPropertyChanged("RecurMon");
					this.OnRecurMonChanged();
				}
			}
		}
		
		[Column(Storage="_RecurTue")]
		public System.Nullable<bool> RecurTue
		{
			get
			{
				return this._RecurTue;
			}
			set
			{
				if ((this._RecurTue != value))
				{
					this.OnRecurTueChanging(value);
					this.SendPropertyChanging();
					this._RecurTue = value;
					this.SendPropertyChanged("RecurTue");
					this.OnRecurTueChanged();
				}
			}
		}
		
		[Column(Storage="_RecurWed")]
		public System.Nullable<bool> RecurWed
		{
			get
			{
				return this._RecurWed;
			}
			set
			{
				if ((this._RecurWed != value))
				{
					this.OnRecurWedChanging(value);
					this.SendPropertyChanging();
					this._RecurWed = value;
					this.SendPropertyChanged("RecurWed");
					this.OnRecurWedChanged();
				}
			}
		}
		
		[Column(Storage="_RecurThu")]
		public System.Nullable<bool> RecurThu
		{
			get
			{
				return this._RecurThu;
			}
			set
			{
				if ((this._RecurThu != value))
				{
					this.OnRecurThuChanging(value);
					this.SendPropertyChanging();
					this._RecurThu = value;
					this.SendPropertyChanged("RecurThu");
					this.OnRecurThuChanged();
				}
			}
		}
		
		[Column(Storage="_RecurFri")]
		public System.Nullable<bool> RecurFri
		{
			get
			{
				return this._RecurFri;
			}
			set
			{
				if ((this._RecurFri != value))
				{
					this.OnRecurFriChanging(value);
					this.SendPropertyChanging();
					this._RecurFri = value;
					this.SendPropertyChanged("RecurFri");
					this.OnRecurFriChanged();
				}
			}
		}
		
		[Column(Storage="_RecurSat")]
		public System.Nullable<bool> RecurSat
		{
			get
			{
				return this._RecurSat;
			}
			set
			{
				if ((this._RecurSat != value))
				{
					this.OnRecurSatChanging(value);
					this.SendPropertyChanging();
					this._RecurSat = value;
					this.SendPropertyChanged("RecurSat");
					this.OnRecurSatChanged();
				}
			}
		}
		
		[Column(Storage="_RecurSun")]
		public System.Nullable<bool> RecurSun
		{
			get
			{
				return this._RecurSun;
			}
			set
			{
				if ((this._RecurSun != value))
				{
					this.OnRecurSunChanging(value);
					this.SendPropertyChanging();
					this._RecurSun = value;
					this.SendPropertyChanged("RecurSun");
					this.OnRecurSunChanged();
				}
			}
		}
		
		[Column(Name="EndByDate", Storage="_EndByDate")]
		public System.Nullable<System.DateTime> RecurEndByDate
		{
			get
			{
				return this._EndByDate;
			}
			set
			{
				if ((this._EndByDate != value))
				{
					this.OnRecurEndByDateChanging(value);
					this.SendPropertyChanging();
					this._EndByDate = value;
					this.SendPropertyChanged("RecurEndByDate");
					this.OnRecurEndByDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class OpenID : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OpenIDUrl;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOpenIDUrlChanging(string value);
    partial void OnOpenIDUrlChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public OpenID()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_OpenIDUrl", CanBeNull=false, IsPrimaryKey=true)]
		public string OpenIDUrl
		{
			get
			{
				return this._OpenIDUrl;
			}
			set
			{
				if ((this._OpenIDUrl != value))
				{
					this.OnOpenIDUrlChanging(value);
					this.SendPropertyChanging();
					this._OpenIDUrl = value;
					this.SendPropertyChanged("OpenIDUrl");
					this.OnOpenIDUrlChanged();
				}
			}
		}
		
		[Column(Storage="_UserID")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="User_OpenID", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.OpenIDs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.OpenIDs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
